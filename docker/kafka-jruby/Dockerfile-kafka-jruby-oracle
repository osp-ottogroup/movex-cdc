# Build Docker image based on jRuby with both zookeeper and kafka
# for usage as default image for whole CI pipeline for MOVEX CDC
# Peter Ramm, 2021-03-02

# Usage:
# Update base images:
#   docker pull openjdk:19
#   docker pull oraclelinux:8-slim
# Build image:      > docker build -f Dockerfile-kafka-jruby-oracle --no-cache -t registry.gitlab.com/osp-silver/oss/movex-cdc/kafka-jruby:9.4.5.0-jdk19 .

# base image to build a JRE
    FROM openjdk:19 as openjdk

# Build small JRE image
RUN $JAVA_HOME/bin/jlink \
         --verbose \
         --add-modules ALL-MODULE-PATH \
         --strip-debug \
         --no-man-pages \
         --no-header-files \
         --compress=2 \
         --output /customjre

FROM oraclelinux:8-slim

MAINTAINER Peter.Ramm@ottogroup.com
ARG JRUBY_VERSION=9.4.5.0
# Kafka 3.5.0 has problems with transactions in a single broker setup
ARG KAFKA_VERSION=3.7.0
ARG SCALA_VERSION=2.13
ENV JRUBY_VERSION=$JRUBY_VERSION
ENV KAFKA_VERSION=$KAFKA_VERSION
ENV SCALA_VERSION=$SCALA_VERSION
ENV KAFKA_HOME=/opt/kafka
ENV JAVA_HOME=/opt/jre
ENV PATH "${JAVA_HOME}/bin:/opt/jruby-$JRUBY_VERSION/bin:$PATH"

#EXPOSE 2181/tcp 9092/tcp
# Allow chromedriver to use this port at all interfaces
EXPOSE  9515

# copy JRE from the base image
COPY --from=openjdk /customjre $JAVA_HOME
# RUN-Steps:
# - update system
# - install tools
# - install podman
# - install Kafka
RUN  microdnf update && \
     microdnf install procps wget tar gzip vim util-linux findutils podman jq bc make unzip openssl && \
     wget "https://downloads.apache.org/kafka/${KAFKA_VERSION}/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz" -O /tmp/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz && \
     cd /opt && tar xvf /tmp/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz && rm /tmp/kafka_${SCALA_VERSION}-${KAFKA_VERSION}.tgz && \
     ln -s kafka_${SCALA_VERSION}-${KAFKA_VERSION} ${KAFKA_HOME} && \
     sed -i 's|^log.dirs=.*$|log.dirs=/var/lib/kafka|' /opt/kafka/config/server.properties && \
     cd /opt && wget https://repo1.maven.org/maven2/org/jruby/jruby-dist/$JRUBY_VERSION/jruby-dist-$JRUBY_VERSION-bin.tar.gz && \
     cd /opt && tar -xvf jruby-dist-$JRUBY_VERSION-bin.tar.gz && rm jruby-dist-$JRUBY_VERSION-bin.tar.gz && \
     ln -s /opt/jruby-$JRUBY_VERSION/bin/jruby /opt/jruby-$JRUBY_VERSION/bin/ruby && \
     ruby -v && \
     echo wget "https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm" && \
     echo microdnf install liberation-fonts libXScrnSaver.x86_64 libappindicator-gtk3.x86_64 vulkan libgbm xdg-utils alsa-lib nspr nss && \
     echo rpm -i google-chrome-stable_current_x86_64.rpm && \
     echo rm google-chrome-stable_current_x86_64.rpm && \
     echo 'Europe/Berlin' > /etc/timezone && rm -f /etc/localtime && ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime && \
     date && \
     gem install --no-doc bundler && \
     echo "gem: --no-rdoc --no-ri" > ~/.gemrc && \
     microdnf clean all

# Without own volume for ontime usage in CI pipeline
#VOLUME /var/lib/kafka

COPY    run-kafka-jruby.sh start-kafka.sh start-kafka_ssl.sh stop-kafka.sh /opt/

# use bracket syntax to ensure run-kafka-jruby.sh runs with PID 1 and receives SIGTERM signal
CMD ["/opt/run-kafka-jruby.sh"]

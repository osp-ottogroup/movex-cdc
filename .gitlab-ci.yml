# Build and test MovexCdc application
# Requires:
#  - prebuilt database image
#  - kafka-jruby image built from /docker/kafka-jruby

# Dockerfile for image is located in movex-cdc/docker/kafka-jruby
image: registry.gitlab.com/osp-silver/oss/movex-cdc/kafka-jruby:9.4.13.0-jdk21

variables:
  # Should the log output of DB service be shown in the job log?
  CI_DEBUG_SERVICES: "false"
  LOG_LEVEL: "info"
  RAILS_MAX_THREADS: 100
  KAFKA_SEED_BROKER: localhost:9092
  TEMP_DOCKER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME-ci-temp
  PODMAN: podman --events-backend=file --storage-driver=vfs --cgroup-manager=cgroupfs
  RUBYOPT: -W0
  JRUBY_OPTS: --dev

# Separate stages because pending jobs get stuck after one hour (hard limit)
stages:
  - code_analysis
  - test
  - pre_build
  - build
  - post_build
  - deploy

# interactive edit config/brakemen.ignore by > brakeman -A -I
# Use this to exclude findings after considering as false positives
brakeman_analysis:
  stage: code_analysis
  script:
      # racc installed in addition due to error: no such file to load -- racc/info. Please install the appropriate dependency: ruby_parser.
    - gem install --no-doc racc brakeman
    - brakeman -A

test_frontend:
  image: node:14-alpine
  stage: code_analysis
  script:
    - npm install -g @vue/cli
    - cd frontend && npm ci && npm run test:unit

prepare_tests:
  stage: code_analysis
  script:
    - date
    - gem install --no-doc bundler
    - bundle config set deployment 'true'
    # due to error building digest-crc:6.0.3 sh: line 0: exec: jrake: not found
    - ln -s /opt/jruby-$JRUBY_VERSION/bin/rake /opt/jruby-$JRUBY_VERSION/bin/jrake
    - bundle install --jobs 4
  artifacts:
    when: always
    paths:
      - vendor/bundle
      - .bundle
    expire_in: 1 month

.tests:
  variables:
    RAILS_ENV: "test"
  #    KAFKA_LISTENERS: LISTENER_EXT://0.0.0.0:9092,LISTENER_INT://0.0.0.0 :9093
  #    KAFKA_ADVERTISED_LISTENERS: LISTENER_EXT://kafka:9092,LISTENER_INT://localhost:9093
  #    KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_EXT:PLAINTEXT,LISTENER_INT:PLAINTEXT
  #    KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INT

  script:
    - /opt/start-kafka.sh
    - date
    - java -version
    # - gem install --no-doc bundler
    # - bundle config set deployment 'true'
    # due to error building digest-crc:6.0.3 sh: line 0: exec: jrake: not found
    # - ln -s /opt/jruby-$JRUBY_VERSION/bin/rake /opt/jruby-$JRUBY_VERSION/bin/jrake
    # - bundle install --jobs 4
    - >
      if [ "$CI_JOB_NAME" == "test_oracle_autonomous" ]; then
        (
          cd test/oracle_autonomous
          # uses secret GPG_KEY_FOR_DB_WALLET_ENCRYPTION
          ./decrypt_DB_wallet.sh && unzip Wallet_panoramatest.zip
        )
      fi
    # Wait max. 10 minutes for DB available
    - bundle exec rake "ci_preparation:wait_for_db_available[10]"
    # Fix problem in oracle_enhanced-adapter with access on All_Synonyms
    - >
      if [ "$CI_JOB_NAME" != "test_oracle_autonomous" ]; then
        bundle exec rake ci_preparation:speedup_oracle_dictionary_calls
      fi
    - bundle exec rake ci_preparation:create_user
    - bundle exec rails db:migrate RAILS_ENV=test
    - >
      if [ "$DB_TYPE" == "ORACLE" ]; then
        # Check if db:rollback is functional + restore migration
        # SQLite does not support remove_foreign_key although it is implemented
        bundle exec rails db:migrate RAILS_ENV=test VERSION=0 && bundle exec rails db:migrate RAILS_ENV=test
      fi
    - bundle exec rails test
  artifacts:
    when: always
    paths:
      - log/
      - tmp/screenshots/
      - /opt/kafka/logs/*
    expire_in: 1 month
#  rules:
#    - when: never

.tests_SQLITE:
  extends: .tests
  variables:
    DB_TYPE: "SQLITE"

.tests_ORACLE:
  extends: .tests
  variables:
    DB_TYPE: "ORACLE"
    DB_SYS_PASSWORD: "oracle"
    DB_SYS_USER: "SYS"
    DB_URL: "oracle-db:1521/ORCLPDB1"
    KAFKA_CLIENT_LIBRARY: java


test_sqlite_java:
  stage: test
  extends: .tests_SQLITE
  variables:
    KAFKA_CLIENT_LIBRARY: java

# Use mock implementation for Kafka, checks JSON conformity
test_sqlite_mock:
  stage: test
  extends: .tests_SQLITE
  variables:
    KAFKA_CLIENT_LIBRARY: mock

#test_oracle_autonomous:
#  stage: test
#  extends: .tests
#  variables:
#    DB_TYPE: "ORACLE"
#    DB_SYS_PASSWORD: $ORACLE_AUTONOMOUS_ADMIN_PASSWORD
#    DB_SYS_USER: "ADMIN"
#    DB_URL: "PANORAMATEST_TPURGENT"
#    TNS_ADMIN: "./test/oracle_autonomous"

test_oracle_12.1:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:12.1.0.2-ee
      alias: oracle-db

test_oracle_12.1_SE:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:12.1.0.2-se2
      alias: oracle-db

test_oracle_12.2:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:12.2.0.1-ee
      alias: oracle-db

test_oracle_12.2_SE:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:12.2.0.1-se2
      alias: oracle-db

test_oracle_19.10_EE:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:19.10.0.0-ee
      alias: oracle-db

test_oracle_19.10_EE_mock:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:19.10.0.0-ee
      alias: oracle-db
  variables:
    KAFKA_CLIENT_LIBRARY: mock

test_oracle_19.10-SE2:
  stage: test
  extends: .tests_ORACLE
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:19.10.0.0-se2
      alias: oracle-db

generate_asciidoc:
  stage: build
  script:
    - gem install --no-doc asciidoctor
    - asciidoctor -o doc/movex-cdc.html doc/movex-cdc.adoc
    - asciidoctor -o doc/movex-cdc_demo.html doc/movex-cdc_demo.adoc
    - gem install --no-doc asciidoctor-pdf
    - asciidoctor-pdf -o doc/movex-cdc.pdf doc/movex-cdc.adoc
  artifacts:
    paths:
      - doc/movex-cdc.html
      - doc/movex-cdc_demo.html
      - doc/images/
      - doc/movex-cdc.pdf

build_movex_cdc:
  stage: build

  image:
    # 2021-04-27: Image used from own registry because https://storage.googleapis.com/ is not accessible from within OCI
    name: gcr.io/kaniko-project/executor:debug
    # name: registry.gitlab.com/osp-silver/oss/movex-cdc/kaniko-executor:debug
    entrypoint: [""]

  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - 'echo "{\"release\": \"$release_tag\", \"date\": \"$(date -I)\", \"commit\": \"$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA\"}" > build.json'
    - cat build.json
    - echo "Docker image = $TEMP_DOCKER_IMAGE"
    - |
      BUILD_VERSION=${CI_COMMIT_REF_NAME#"prod_"}_`date "+%Y-%m-%d_%H-%M-%S"`
      JRUBY_VERSION=`cat .ruby-version | cut -c 7-20`
      echo JRUBY_VERSION=$JRUBY_VERSION
      /kaniko/executor \
        --build-arg BUILD_VERSION=$BUILD_VERSION \
        --build-arg JRUBY_VERSION=$JRUBY_VERSION \
        --context $CI_PROJECT_DIR \
        --dockerfile $CI_PROJECT_DIR/docker/movex-cdc/Dockerfile-movex-cdc-oracle \
        --destination $TEMP_DOCKER_IMAGE

trivy_scan:
  stage: post_build
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    # Update 2022-08-22 git repo needed for .trivyignore
    # GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy clean --scan-cache
    # update vulnerabilities db
    #- time trivy --no-progress --cache-dir .trivycache/
    - echo "Content of .trivyignore" && cat .trivyignore
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy --cache-dir .trivycache/ image --exit-code 0  --no-progress --format template --template "@/contrib/gitlab.tpl" --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$TEMP_DOCKER_IMAGE"
    # Prints full report
    - time trivy --cache-dir .trivycache/ image --exit-code 0 --no-progress "$TEMP_DOCKER_IMAGE"
    # Fail on critical vulnerabilities
    - time trivy --cache-dir .trivycache/ image --exit-code 1 --severity CRITICAL --no-progress "$TEMP_DOCKER_IMAGE"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json

#rapid7_scan:
# # deactivated because of error if calling in podman: Failed to analyze image. java.io.IOException: Insufficient disk space to extract resource. 0 available, 9 required.
#  stage: post_build
#  variables:
#    MAXIMAL_ALLOWED_RISK_SCORE: 0
#  script:
#    - $PODMAN login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - $PODMAN pull $TEMP_DOCKER_IMAGE
#    - $PODMAN pull docker.io/rapid7/container-image-scanner
#    - $PODMAN save $TEMP_DOCKER_IMAGE -o movex-cdc.tar
#    - $PODMAN run -it --rm -v $PWD/movex-cdc.tar:/movex-cdc.tar rapid7/container-image-scanner -f movex-cdc.tar -k "$RAPID7_IMAGE_SCANNER_API_KEY" -r eu > rapid7.json
#    - cat rapid7.json | jq .assessment
#    - |
#      RISK_SCORE=`cat rapid7.json | jq .assessment.risk_score`
#      # Use bc for comparison because $RISK_SCORE can be a floating point number
#      if [ `echo "$RISK_SCORE > $MAXIMAL_ALLOWED_RISK_SCORE" | bc` -eq 1 ]; then
#        echo "risk_score $RISK_SCORE is higher than allowed maximum $MAXIMAL_ALLOWED_RISK_SCORE ! Aborting..."
#        echo ''
#        cat rapid7.json
#        false
#      fi
#  artifacts:
#    when: always
#    paths:
#      - rapid7.json
#    expire_in: 1 month


.docker_test:
  script:
    - $PODMAN login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - $PODMAN pull $TEMP_DOCKER_IMAGE
    - echo "HOSTNAME = $HOSTNAME"
    - export IP_ADDRESS=$(ping -c 1 $HOSTNAME | awk -F'[()]' '/PING/{print $2}')
    - echo "IP address of $HOSTNAME = $IP_ADDRESS"
    - export RUN_CONFIG=$PWD/run_config.yml
    - |
      echo  "# MOVEX CDC config generated by CI Pipeline  " > $RUN_CONFIG  
      echo  "DB_TYPE:            ORACLE                   " >> $RUN_CONFIG
      echo  "DB_USER:            movex                    " >> $RUN_CONFIG
      echo  "DB_PASSWORD:        movex                    " >> $RUN_CONFIG
      echo  "DB_URL:             $DB_URL                  " >> $RUN_CONFIG
      echo  "DB_SYS_PASSWORD:    oracle                   " >> $RUN_CONFIG 
      # Use the hostname of the container for the seed broker to allow access from inside the Podman container
      echo  "KAFKA_SEED_BROKER:  \"$HOSTNAME:9092\""       >> $RUN_CONFIG
    - |
      if [ -n "$KAFKA_CLIENT_LIBRARY" ]; then
        echo  "KAFKA_CLIENT_LIBRARY: $KAFKA_CLIENT_LIBRARY" >> $RUN_CONFIG
      fi
      if [ -n "$KAFKA_PROPERTIES_FILE" ]; then
        echo  "KAFKA_PROPERTIES_FILE: $KAFKA_PROPERTIES_FILE" >> $RUN_CONFIG
      fi
    - cat $RUN_CONFIG
    - $PODMAN run --rm -v $RUN_CONFIG:/run_config.yml -e RUN_CONFIG=/run_config.yml $TEMP_DOCKER_IMAGE bundle exec rake "ci_preparation:wait_for_db_available[10]"
    - $PODMAN run --rm -v $RUN_CONFIG:/run_config.yml -e RUN_CONFIG=/run_config.yml $TEMP_DOCKER_IMAGE bundle exec rake ci_preparation:speedup_oracle_dictionary_calls
    - $PODMAN run --rm -v $RUN_CONFIG:/run_config.yml -e RUN_CONFIG=/run_config.yml $TEMP_DOCKER_IMAGE bundle exec rake ci_preparation:create_user
    - /opt/start-kafka.sh
    - $PODMAN run -d --name=movex-cdc -p8080:8080 -v $RUN_CONFIG:/run_config.yml -e RUN_CONFIG=/run_config.yml -v /opt/kafka:/opt/kafka $TEMP_DOCKER_IMAGE
    - $PODMAN ps
    - |
      echo "Waiting for SystemValidationJob to be performed"
      MAX_WAIT=240 # 4 minutes
      typeset -i LOOPS=0
      while [ $LOOPS -lt $MAX_WAIT ]; do
        retval=0
        $PODMAN logs movex-cdc 2>&1 | grep "Performed SystemValidationJob" >/dev/null || retval=$? 
        if [ $retval -eq 0 ]; then
          break
        fi
        LOOPS=LOOPS+1
        echo -n .
        sleep 1
      done
      if [ $LOOPS -eq $MAX_WAIT ]; then
        echo "SystemValidationJob not finished after $MAX_WAIT seconds"
        echo "retval = $retval"
        false
      else
        echo "SystemValidationJob finished after $LOOPS seconds"
      fi
      typeset -i LOOPS=0
      while [ $LOOPS -lt $MAX_WAIT ]; do
        retval=0
        curl http://localhost:8080/ 2>/dev/null >/dev/null || retval=$?
        if [ $retval -eq 0 ]; then
          break
        fi
        LOOPS=LOOPS+1
        echo -n .
        sleep 1
      done
      if [ $LOOPS -eq $MAX_WAIT ]; then
        echo "No access to port 8080 after $MAX_WAIT seconds"
        echo "retval = $retval"
        curl http://localhost:8080/
        false
      else
        echo "Access to port 8080 after $LOOPS seconds"
      fi
    - |
      # Check healthcheck endpoint for warnings, retry up to x seconds if warnings are present
      MAX_WAIT=20
      typeset -i LOOPS=0
      while [ $LOOPS -lt $MAX_WAIT ]; do
        retval=0
        curl -L http://localhost:8080/health_check/ > health_check_result.log 
        grep '"warnings": "",' health_check_result.log || retval=$?
        if [ $retval -eq 0 ]; then
          break
        fi
        LOOPS=LOOPS+1
        echo -n .
        sleep 1
      done
      if [ $LOOPS -eq $MAX_WAIT ]; then
        echo "healthcheck warnings are not empty after $LOOPS seconds! Details follow:"
        # Wait for possible max.block.ms to reach at init_transactions to have the error in log output
        sleep 6
        cat health_check_result.log
        $PODMAN logs movex-cdc
        false
      fi
    - echo "Starting integration tests"
    - echo "$RUN_CONFIG"
    - cat $RUN_CONFIG
    - bundle exec rake test:run_integration_test RAILS_ENV=development
  after_script:
    - |
      $PODMAN logs movex-cdc 2>&1 > movex-cdc.log
      # ignore possible file system errors at podman stop like "tearing down network namespace configuration for container" or "Unable to clean up network for container"
      $PODMAN stop movex-cdc || exit 0
  artifacts:
    when: always
    paths:
      - movex-cdc.log
      - /opt/kafka/logs/*
      - /opt/kafka/*client*
      - /opt/kafka/*server*
    expire_in: 1 month

docker_test_12.1_PLAINTEXT:
  stage: post_build
  extends: .docker_test
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:12.2.0.1-ee
      alias: oracle-db
  variables:
    SECURITY_PROTOCOL: PLAINTEXT
    DB_URL: "oracle-db:1521/ORCLPDB1"

docker_test_19.10_SSL:
  stage: post_build
  extends: .docker_test
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:19.10.0.0-ee
      alias: oracle-db
  variables:
    KAFKA_PROPERTIES_FILE: /opt/kafka/client.properties
    SECURITY_PROTOCOL: SSL
    DB_URL: "oracle-db:1521/ORCLPDB1"

# SSL without keystore file, so no client authentication
docker_test_19.10_SSL_NO_KEYSTORE:
  stage: post_build
  extends: .docker_test
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:19.10.0.0-ee
      alias: oracle-db
  variables:
    KAFKA_PROPERTIES_FILE: /opt/kafka/client.properties
    SECURITY_PROTOCOL: SSL
    INITIAL_WORKER_THREADS: 1
    NO_KEYSTORE_FILE: "true"
    DB_URL: "oracle-db:1521/ORCLPDB1"

docker_test_19.10_SASL_PLAINTEXT:
  stage: post_build
  extends: .docker_test
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:19.10.0.0-ee
      alias: oracle-db
  variables:
    KAFKA_PROPERTIES_FILE: /opt/kafka/client.properties
    SECURITY_PROTOCOL: SASL_PLAINTEXT
    DB_URL: "oracle-db:1521/ORCLPDB1"

docker_test_19.10_SASL_SSL:
  stage: post_build
  extends: .docker_test
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:19.10.0.0-ee
      alias: oracle-db
  variables:
    KAFKA_PROPERTIES_FILE: /opt/kafka/client.properties
    SECURITY_PROTOCOL: SASL_SSL
    DB_URL: "oracle-db:1521/ORCLPDB1"

# Test with native configuration in run_config.yml instead of properties file
docker_test_19.10_SASL_SSL_no_properties:
  stage: code_analysis
  # stage: post_build
  extends: .docker_test
  services:
    - name: registry.gitlab.com/osp-silver/oss/movex-cdc/oracle/database_prebuilt:19.10.0.0-ee
      alias: oracle-db
  variables:
    SECURITY_PROTOCOL: SASL_SSL
    DB_URL: "oracle-db:1521/ORCLPDB1"
    KAFKA_SSL_KEYSTORE_LOCATION: /opt/kafka/kafka.client.keystore.p12
    KAFKA_SSL_KEYSTORE_PASSWORD: hugo01
    KAFKA_SSL_KEY_PASSWORD: hugo01
    KAFKA_SSL_TRUSTSTORE_LOCATION: /opt/kafka/kafka.client.truststore.jks
    KAFKA_SSL_TRUSTSTORE_PASSWORD: hugo01
    KAFKA_SASL_PLAIN_USERNAME: admin
    KAFKA_SASL_PLAIN_PASSWORD: admin-secret
    # sasl.mechanism=PLAIN

# Deploy the static site to GitLab Pages, but only for master branch
pages:
  stage: deploy
  only:
    refs:
      - master
  script:
    - cp doc/movex-cdc.html public/
    - cp -r doc/images public/
    - cp doc/movex-cdc.pdf public/
    - cp doc/movex-cdc_demo.html public/
    - cp doc/google70fcb57bf7ac9cbe.html public/
    - cp doc/sitemap.xml public/
  artifacts:
    paths:
      - public/movex-cdc.pdf
      - public/movex-cdc.html
      - public/movex-cdc_demo.html
      - public/google70fcb57bf7ac9cbe.html
      - public/sitemap.xml
      - public/images/

# Make the Docker image available for user after treating as clean
final_tag_docker:
  stage: deploy
  script:
    - $PODMAN login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Ensure previously built image is available
    - $PODMAN pull $TEMP_DOCKER_IMAGE
    # Deploy prod-Releases to gitlab registry and OSPs dockerhub account
    - |
      # use tag name as branch name, but with release number only for prod (without prefix "prod_")
      TAG_NAME=${CI_COMMIT_REF_NAME#"prod_"}
      echo "Push image $TEMP_DOCKER_IMAGE to $CI_REGISTRY_IMAGE:$TAG_NAME"
      $PODMAN tag $TEMP_DOCKER_IMAGE $CI_REGISTRY_IMAGE:$TAG_NAME
      $PODMAN push $CI_REGISTRY_IMAGE:$TAG_NAME     
      # only push prod-branches to Dockerhub
      if [[ $CI_COMMIT_REF_NAME == "prod_"* ]]; then
        DOCKER_IMAGE_NAME=docker.io/ottogroupsolutionproviderosp/movex-cdc
        echo "Push image $TEMP_DOCKER_IMAGE to $DOCKER_IMAGE_NAME:$TAG_NAME"
        $PODMAN login -u peterramm -p $DOCKERHUB_ACCESS_TOKEN docker.io
        $PODMAN tag $TEMP_DOCKER_IMAGE $DOCKER_IMAGE_NAME:$TAG_NAME
        $PODMAN push $DOCKER_IMAGE_NAME:$TAG_NAME
        LATEST_PROD_BRANCH=prod_`curl -s "https://gitlab.com/api/v4/projects/osp-silver%2Foss%2Fmovex-cdc/repository/branches?page=1&per_page=10000" | \
          jq '.[] | .name' | \
          grep 'prod_' | \
          sed 's/prod_//' | \
          sed 's/"//g' | \
          sort -t. -k1,1n -k2,2n -k3,3n | \
          tail -n 1`
        if [[ "$LATEST_PROD_BRANCH" = "$CI_COMMIT_REF_NAME" ]]; then
          echo "Tagging the image :latest at gitlab registry because $CI_COMMIT_REF_NAME is the latest productive branch"
          $PODMAN tag $TEMP_DOCKER_IMAGE $CI_REGISTRY_IMAGE:latest
          $PODMAN push $CI_REGISTRY_IMAGE:latest
          echo "Tagging the image :latest at Docker hub because $CI_COMMIT_REF_NAME is the latest productive branch"
          $PODMAN tag $TEMP_DOCKER_IMAGE $DOCKER_IMAGE_NAME:latest
          $PODMAN push $DOCKER_IMAGE_NAME:latest
        else
          echo "$CI_COMMIT_REF_NAME is not the latest productive branch ($LATEST_PROD_BRANCH). Not tagged as latest"
        fi
      else
        echo "Image of branch $CI_COMMIT_REF_NAME not pushed to Dockerhub"
      fi
